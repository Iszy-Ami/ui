// This file is generated by [oats][0] and should not be edited by hand.
//
// [0]: https://github.com/influxdata/oats

export interface Functions {
  functions?: Function[]
}

export interface Function {
  readonly id?: string
  name: string
  description?: string
  orgID: string
  script: string
  language?: FunctionLanguage
  url?: string
  readonly createdAt?: string
  readonly updatedAt?: string
}

export type FunctionLanguage = 'python' | 'flux'

export interface Error {
  readonly code:
    | 'internal error'
    | 'not found'
    | 'conflict'
    | 'invalid'
    | 'unprocessable entity'
    | 'empty value'
    | 'unavailable'
    | 'forbidden'
    | 'too many requests'
    | 'unauthorized'
    | 'method not allowed'
    | 'request too large'
    | 'unsupported media type'
  readonly message: string
  readonly op?: string
  readonly err?: string
}

export interface FunctionCreateRequest {
  name: string
  description?: string
  orgID: string
  script: string
  language: FunctionLanguage
}

export type FunctionTriggerRequest = FunctionInvocationParams & {
  script: string
  method: 'GET' | 'POST'
  orgID?: string
  org?: string
  language: FunctionLanguage
}

export interface FunctionInvocationParams {
  params?: any
}

export type FunctionTriggerResponse = FunctionRunBase & {
  response?: FunctionHTTPResponse
}

export interface FunctionRunBase {
  readonly id?: string
  status?: 'ok' | 'error'
  error?: string
  logs?: FunctionRunLog[]
  response?: FunctionHTTPResponseNoData
  readonly startedAt?: string
}

export interface FunctionRunLog {
  message?: string
  timestamp?: string
  severity?: any
}

export interface FunctionHTTPResponseNoData {
  type?: 'http'
  dataType?: 'json'
  headers?: any
  statusCode?: '200' | '500' | '404'
}

export type FunctionHTTPResponse = FunctionHTTPResponseNoData & {
  data?: FunctionHTTPResponseData
}

export type FunctionHTTPResponseData = any

export interface FunctionUpdateRequest {
  name?: string
  description?: string
  script?: string
}

export interface FunctionRuns {
  runs?: FunctionRun[]
}

export type FunctionRun = FunctionRunBase & {
  response?: FunctionHTTPResponseNoData
}

interface RequestOptions {
  signal?: AbortSignal
}

export type RequestHandler = (
  url: string,
  query: string,
  init: RequestInit
) => {url: string; query: string; init: RequestInit}
export type ResponseHandler = (
  status: number,
  headers: Headers,
  data: any
) => {status: number; headers: Headers; data: any}

const RequestContext = function(
  requestHandler: RequestHandler,
  responseHandler: ResponseHandler
) {
  this.requestHandler = requestHandler
  this.responseHandler = responseHandler
}

RequestContext.prototype.request = async function(
  method: string,
  url: string,
  params: any = {},
  options: RequestOptions = {}
): Promise<any> {
  const requestHeaders = new Headers(params.headers)
  const contentType = requestHeaders.get('Content-Type') || ''

  if (params.auth) {
    const credentials = btoa(`${params.auth.username}:${params.auth.password}`)

    requestHeaders.append('Authorization', `Basic ${credentials}`)
  }

  const body =
    params.data && contentType.includes('json')
      ? JSON.stringify(params.data)
      : params.data

  const query = params.query ? `?${new URLSearchParams(params.query)}` : ''

  const {
    url: middlewareUrl,
    query: middlewareQuery,
    init,
  } = this.requestHandler(url, query, {
    method,
    body,
    credentials: 'same-origin',
    signal: options.signal,
    headers: requestHeaders,
  })

  const response = await fetch(`${middlewareUrl}${middlewareQuery}`, init)

  const {status, headers} = response
  const responseContentType = headers.get('Content-Type') || ''

  let data

  if (responseContentType.includes('json')) {
    data = await response.json()
  } else if (responseContentType.includes('octet-stream')) {
    data = await response.blob()
  } else {
    data = await response.text()
  }

  return this.responseHandler(status, headers, data)
}

RequestContext.prototype.setRequestHandler = function(
  requestHandler: RequestHandler
) {
  this.requestHandler = requestHandler
}

RequestContext.prototype.setResponseHandler = function(
  responseHandler: ResponseHandler
) {
  this.responseHandler = responseHandler
}

const rc = new RequestContext(
  (url, query, init) => {
    return {url, query, init}
  },
  (status, headers, data) => {
    return {status, headers, data}
  }
)
const request = rc.request.bind(rc)
const setRequestHandler = rc.setRequestHandler.bind(rc)
const setResponseHandler = rc.setResponseHandler.bind(rc)

export {request, setRequestHandler, setResponseHandler}

export interface GetPocFunctionsParams {
  query?: {
    org?: string
    orgID?: string
    limit?: number
    offset?: number
  }
}

type GetPocFunctionsResult =
  | GetPocFunctionsOKResult
  | GetPocFunctionsDefaultResult

interface GetPocFunctionsOKResult {
  status: 200
  headers: Headers
  data: Functions
}

interface GetPocFunctionsDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getPocFunctions = (
  params: GetPocFunctionsParams,
  options: RequestOptions = {}
): Promise<GetPocFunctionsResult> =>
  request('GET', '/api/v2/poc-functions', params, options) as Promise<
    GetPocFunctionsResult
  >

export interface PostPocFunctionParams {
  data: FunctionCreateRequest
}

type PostPocFunctionResult =
  | PostPocFunctionCreatedResult
  | PostPocFunctionDefaultResult

interface PostPocFunctionCreatedResult {
  status: 201
  headers: Headers
  data: Function
}

interface PostPocFunctionDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const postPocFunction = (
  params: PostPocFunctionParams,
  options: RequestOptions = {}
): Promise<PostPocFunctionResult> =>
  request(
    'POST',
    '/api/v2/poc-functions',
    {...params, headers: {'Content-Type': 'application/json'}},
    options
  ) as Promise<PostPocFunctionResult>

export interface PostPocFunctionsTriggerParams {
  data: FunctionTriggerRequest
}

type PostPocFunctionsTriggerResult =
  | PostPocFunctionsTriggerOKResult
  | PostPocFunctionsTriggerDefaultResult

interface PostPocFunctionsTriggerOKResult {
  status: 200
  headers: Headers
  data: FunctionTriggerResponse
}

interface PostPocFunctionsTriggerDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const postPocFunctionsTrigger = (
  params: PostPocFunctionsTriggerParams,
  options: RequestOptions = {}
): Promise<PostPocFunctionsTriggerResult> =>
  request(
    'POST',
    '/api/v2/poc-functions/trigger',
    {...params, headers: {'Content-Type': 'application/json'}},
    options
  ) as Promise<PostPocFunctionsTriggerResult>

export interface GetPocFunctionParams {
  functionID: string
}

type GetPocFunctionResult = GetPocFunctionOKResult | GetPocFunctionDefaultResult

interface GetPocFunctionOKResult {
  status: 200
  headers: Headers
  data: Function
}

interface GetPocFunctionDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getPocFunction = (
  params: GetPocFunctionParams,
  options: RequestOptions = {}
): Promise<GetPocFunctionResult> =>
  request(
    'GET',
    `/api/v2/poc-functions/${params.functionID}`,
    params,
    options
  ) as Promise<GetPocFunctionResult>

export interface PatchPocFunctionParams {
  functionID: string

  data: FunctionUpdateRequest
}

type PatchPocFunctionResult =
  | PatchPocFunctionOKResult
  | PatchPocFunctionDefaultResult

interface PatchPocFunctionOKResult {
  status: 200
  headers: Headers
  data: Function
}

interface PatchPocFunctionDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const patchPocFunction = (
  params: PatchPocFunctionParams,
  options: RequestOptions = {}
): Promise<PatchPocFunctionResult> =>
  request(
    'PATCH',
    `/api/v2/poc-functions/${params.functionID}`,
    {...params, headers: {'Content-Type': 'application/json'}},
    options
  ) as Promise<PatchPocFunctionResult>

export interface DeletePocFunctionParams {
  functionID: string
}

type DeletePocFunctionResult =
  | DeletePocFunctionNoContentResult
  | DeletePocFunctionDefaultResult

interface DeletePocFunctionNoContentResult {
  status: 204
  headers: Headers
  data: any
}

interface DeletePocFunctionDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const deletePocFunction = (
  params: DeletePocFunctionParams,
  options: RequestOptions = {}
): Promise<DeletePocFunctionResult> =>
  request(
    'DELETE',
    `/api/v2/poc-functions/${params.functionID}`,
    params,
    options
  ) as Promise<DeletePocFunctionResult>

export interface GetPocFunctionsInvokeParams {
  functionID: string

  query?: {
    params?: any
  }
}

type GetPocFunctionsInvokeResult =
  | GetPocFunctionsInvokeOKResult
  | GetPocFunctionsInvokeDefaultResult

interface GetPocFunctionsInvokeOKResult {
  status: 200
  headers: Headers
  data: FunctionHTTPResponseData
}

interface GetPocFunctionsInvokeDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getPocFunctionsInvoke = (
  params: GetPocFunctionsInvokeParams,
  options: RequestOptions = {}
): Promise<GetPocFunctionsInvokeResult> =>
  request(
    'GET',
    `/api/v2/poc-functions/${params.functionID}/invoke`,
    params,
    options
  ) as Promise<GetPocFunctionsInvokeResult>

export interface PostPocFunctionsInvokeParams {
  functionID: string

  data?: FunctionInvocationParams
}

type PostPocFunctionsInvokeResult =
  | PostPocFunctionsInvokeOKResult
  | PostPocFunctionsInvokeDefaultResult

interface PostPocFunctionsInvokeOKResult {
  status: 200
  headers: Headers
  data: FunctionHTTPResponseData
}

interface PostPocFunctionsInvokeDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const postPocFunctionsInvoke = (
  params: PostPocFunctionsInvokeParams,
  options: RequestOptions = {}
): Promise<PostPocFunctionsInvokeResult> =>
  request(
    'POST',
    `/api/v2/poc-functions/${params.functionID}/invoke`,
    {...params, headers: {'Content-Type': 'application/json'}},
    options
  ) as Promise<PostPocFunctionsInvokeResult>

export interface GetPocFunctionsRunsParams {
  functionID: string

  query?: {
    limit?: number
    offset?: number
  }
}

type GetPocFunctionsRunsResult =
  | GetPocFunctionsRunsOKResult
  | GetPocFunctionsRunsDefaultResult

interface GetPocFunctionsRunsOKResult {
  status: 200
  headers: Headers
  data: FunctionRuns
}

interface GetPocFunctionsRunsDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getPocFunctionsRuns = (
  params: GetPocFunctionsRunsParams,
  options: RequestOptions = {}
): Promise<GetPocFunctionsRunsResult> =>
  request(
    'GET',
    `/api/v2/poc-functions/${params.functionID}/runs`,
    params,
    options
  ) as Promise<GetPocFunctionsRunsResult>

export interface GetPocFunctionsRunParams {
  functionID: string
  runID: string
}

type GetPocFunctionsRunResult =
  | GetPocFunctionsRunOKResult
  | GetPocFunctionsRunDefaultResult

interface GetPocFunctionsRunOKResult {
  status: 200
  headers: Headers
  data: FunctionRun
}

interface GetPocFunctionsRunDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getPocFunctionsRun = (
  params: GetPocFunctionsRunParams,
  options: RequestOptions = {}
): Promise<GetPocFunctionsRunResult> =>
  request(
    'GET',
    `/api/v2/poc-functions/${params.functionID}/runs/${params.runID}`,
    params,
    options
  ) as Promise<GetPocFunctionsRunResult>
