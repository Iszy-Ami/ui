// This file is generated by [oats][0] and should not be edited by hand.
//
// [0]: https://github.com/influxdata/oats

export interface Notebooks {
  flows?: Notebook[]
}

export interface Notebook {
  id?: string
  name?: string
  orgID?: string
  spec?: any
  createdAt?: string
  updatedAt?: string
}

export interface Error {
  readonly code:
    | 'internal error'
    | 'not found'
    | 'conflict'
    | 'invalid'
    | 'unprocessable entity'
    | 'empty value'
    | 'unavailable'
    | 'forbidden'
    | 'too many requests'
    | 'unauthorized'
    | 'method not allowed'
    | 'request too large'
    | 'unsupported media type'
  readonly message: string
  readonly op?: string
  readonly err?: string
}

export interface NotebookParams {
  name?: string
  orgID?: string
  spec?: any
}

interface RequestOptions {
  signal?: AbortSignal
}

export type RequestHandler = (
  url: string,
  query: string,
  init: RequestInit
) => {url: string; query: string; init: RequestInit}
export type ResponseHandler = (
  status: number,
  headers: Headers,
  data: any
) => {status: number; headers: Headers; data: any}

const RequestContext = function(
  requestHandler: RequestHandler,
  responseHandler: ResponseHandler
) {
  this.requestHandler = requestHandler
  this.responseHandler = responseHandler
}

RequestContext.prototype.request = async function(
  method: string,
  url: string,
  params: any = {},
  options: RequestOptions = {}
): Promise<any> {
  const requestHeaders = new Headers(params.headers)
  const contentType = requestHeaders.get('Content-Type') || ''

  if (params.auth) {
    const credentials = btoa(`${params.auth.username}:${params.auth.password}`)

    requestHeaders.append('Authorization', `Basic ${credentials}`)
  }

  const body =
    params.data && contentType.includes('json')
      ? JSON.stringify(params.data)
      : params.data

  const query = params.query ? `?${new URLSearchParams(params.query)}` : ''

  const {
    url: middlewareUrl,
    query: middlewareQuery,
    init,
  } = this.requestHandler(url, query, {
    method,
    body,
    credentials: 'same-origin',
    signal: options.signal,
    headers: requestHeaders,
  })

  const response = await fetch(`${middlewareUrl}${middlewareQuery}`, init)

  const {status, headers} = response
  const responseContentType = headers.get('Content-Type') || ''

  let data

  if (responseContentType.includes('json')) {
    data = await response.json()
  } else if (responseContentType.includes('octet-stream')) {
    data = await response.blob()
  } else {
    data = await response.text()
  }

  return this.responseHandler(status, headers, data)
}

RequestContext.prototype.setRequestHandler = function(
  requestHandler: RequestHandler
) {
  this.requestHandler = requestHandler
}

RequestContext.prototype.setResponseHandler = function(
  responseHandler: ResponseHandler
) {
  this.responseHandler = responseHandler
}

const rc = new RequestContext(
  (url, query, init) => {
    return {url, query, init}
  },
  (status, headers, data) => {
    return {status, headers, data}
  }
)
const request = rc.request.bind(rc)
const setRequestHandler = rc.setRequestHandler.bind(rc)
const setResponseHandler = rc.setResponseHandler.bind(rc)

export {request, setRequestHandler, setResponseHandler}

export interface GetNotebooksParams {
  query: {
    orgID: string
  }
}

type GetNotebooksResult =
  | GetNotebooksOKResult
  | GetNotebooksUnauthorizedResult
  | GetNotebooksInternalServerErrorResult

interface GetNotebooksOKResult {
  status: 200
  headers: Headers
  data: Notebooks
}

interface GetNotebooksUnauthorizedResult {
  status: 401
  headers: Headers
  data: Error
}

interface GetNotebooksInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

export const getNotebooks = (
  params: GetNotebooksParams,
  options: RequestOptions = {}
): Promise<GetNotebooksResult> =>
  request('GET', '/api/v2private/notebooks', params, options) as Promise<
    GetNotebooksResult
  >

export interface PostNotebookParams {
  data: NotebookParams
}

type PostNotebookResult =
  | PostNotebookOKResult
  | PostNotebookBadRequestResult
  | PostNotebookUnauthorizedResult
  | PostNotebookInternalServerErrorResult

interface PostNotebookOKResult {
  status: 200
  headers: Headers
  data: Notebook
}

interface PostNotebookBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface PostNotebookUnauthorizedResult {
  status: 401
  headers: Headers
  data: Error
}

interface PostNotebookInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

export const postNotebook = (
  params: PostNotebookParams,
  options: RequestOptions = {}
): Promise<PostNotebookResult> =>
  request(
    'POST',
    '/api/v2private/notebooks',
    {...params, headers: {'Content-Type': 'application/json'}},
    options
  ) as Promise<PostNotebookResult>

export interface GetNotebookParams {
  id: string
}

type GetNotebookResult =
  | GetNotebookOKResult
  | GetNotebookBadRequestResult
  | GetNotebookUnauthorizedResult
  | GetNotebookInternalServerErrorResult

interface GetNotebookOKResult {
  status: 200
  headers: Headers
  data: Notebook
}

interface GetNotebookBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface GetNotebookUnauthorizedResult {
  status: 401
  headers: Headers
  data: Error
}

interface GetNotebookInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

export const getNotebook = (
  params: GetNotebookParams,
  options: RequestOptions = {}
): Promise<GetNotebookResult> =>
  request(
    'GET',
    `/api/v2private/notebooks/${params.id}`,
    params,
    options
  ) as Promise<GetNotebookResult>

export interface PutNotebookParams {
  id: string

  data: NotebookParams
}

type PutNotebookResult =
  | PutNotebookOKResult
  | PutNotebookBadRequestResult
  | PutNotebookUnauthorizedResult
  | PutNotebookInternalServerErrorResult

interface PutNotebookOKResult {
  status: 200
  headers: Headers
  data: Notebook
}

interface PutNotebookBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface PutNotebookUnauthorizedResult {
  status: 401
  headers: Headers
  data: Error
}

interface PutNotebookInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

export const putNotebook = (
  params: PutNotebookParams,
  options: RequestOptions = {}
): Promise<PutNotebookResult> =>
  request(
    'PUT',
    `/api/v2private/notebooks/${params.id}`,
    {...params, headers: {'Content-Type': 'application/json'}},
    options
  ) as Promise<PutNotebookResult>

export interface PatchNotebookParams {
  id: string

  data: NotebookParams
}

type PatchNotebookResult =
  | PatchNotebookOKResult
  | PatchNotebookBadRequestResult
  | PatchNotebookUnauthorizedResult
  | PatchNotebookInternalServerErrorResult

interface PatchNotebookOKResult {
  status: 200
  headers: Headers
  data: Notebook
}

interface PatchNotebookBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface PatchNotebookUnauthorizedResult {
  status: 401
  headers: Headers
  data: Error
}

interface PatchNotebookInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

export const patchNotebook = (
  params: PatchNotebookParams,
  options: RequestOptions = {}
): Promise<PatchNotebookResult> =>
  request(
    'PATCH',
    `/api/v2private/notebooks/${params.id}`,
    {...params, headers: {'Content-Type': 'application/json'}},
    options
  ) as Promise<PatchNotebookResult>

export interface DeleteNotebookParams {
  id: string
}

type DeleteNotebookResult =
  | DeleteNotebookNoContentResult
  | DeleteNotebookBadRequestResult
  | DeleteNotebookUnauthorizedResult
  | DeleteNotebookNotFoundResult
  | DeleteNotebookInternalServerErrorResult

interface DeleteNotebookNoContentResult {
  status: 204
  headers: Headers
  data: any
}

interface DeleteNotebookBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface DeleteNotebookUnauthorizedResult {
  status: 401
  headers: Headers
  data: Error
}

interface DeleteNotebookNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface DeleteNotebookInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

export const deleteNotebook = (
  params: DeleteNotebookParams,
  options: RequestOptions = {}
): Promise<DeleteNotebookResult> =>
  request(
    'DELETE',
    `/api/v2private/notebooks/${params.id}`,
    params,
    options
  ) as Promise<DeleteNotebookResult>
